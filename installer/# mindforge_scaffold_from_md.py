# mindforge_scaffold_from_md.py
# üìù –°–æ–∑–¥–∞—Ç—å –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ MindForge –∏–∑ Markdown-—Å—Ö–µ–º—ã
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
#   python mindforge_scaffold_from_md.py "MindForge ‚Äî Flat Layout Scaffold (mf_core) v0.2.md"
#   python mindforge_scaffold_from_md.py scaffold.md --target "H:/MindForge" --dry-run

from __future__ import annotations
import argparse
from pathlib import Path
from typing import List, Set

CONNECTORS = ("‚îú‚îÄ‚îÄ", "‚îî‚îÄ‚îÄ")

def _calc_depth(line: str) -> int:
    """–ü—Ä–∏–º–µ—Ä–Ω–æ —Å—á–∏—Ç–∞–µ—Ç –≥–ª—É–±–∏–Ω—É –ø–æ –≥—Ä—É–ø–ø–∞–º '‚îÇ   ' / '|   ' / '    ' –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–∏—Ç–µ–ª—è."""
    depth = 0
    i = 0
    while i < len(line):
        if line.startswith("‚îÇ   ", i) or line.startswith("|   ", i) or line.startswith("    ", i):
            depth += 1
            i += 4
        elif line[i] in ("‚îú", "‚îî"):
            break
        else:
            i += 1
    return depth

def _is_tree_line(line: str) -> bool:
    return any(c in line for c in CONNECTORS)

def _extract_name(line: str) -> str:
    """–ë–µ—Ä—ë–º –≤—Å—ë –ø–æ—Å–ª–µ '‚îú‚îÄ‚îÄ ' –∏–ª–∏ '‚îî‚îÄ‚îÄ ', –æ—Ç—Ä–µ–∑–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ—Å–ª–µ '#'."""
    for c in CONNECTORS:
        idx = line.find(c)
        if idx != -1:
            return line[idx + len(c):].strip().split("#")[0].strip()
    return line.strip()

def parse_tree_dirs(markdown: str) -> List[List[str]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π (–∫–∞–∂–¥—ã–π ‚Äî —Å–ø–∏—Å–æ–∫ —Å–µ–≥–º–µ–Ω—Ç–æ–≤) –¢–û–õ–¨–ö–û –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π.
    –ü–µ—Ä–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç ‚Äî –∫–æ—Ä–µ–Ω—å (mindforge/ –∏–ª–∏ MindForge/), –ø–æ–∑–∂–µ –æ—Ç–±—Ä–æ—Å–∏–º.
    """
    dirs: List[List[str]] = []
    stack: List[str] = []
    lines = markdown.splitlines()

    for raw in lines:
        line = raw.rstrip()
        if not line.strip():
            continue

        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ¬´–≥–æ–ª—ã—Ö¬ª –∫–æ—Ä–Ω–µ–π –≤—Ä–æ–¥–µ "MindForge/" –±–µ–∑ –≤–µ—Ç–æ–∫.
        if (line.strip().lower().endswith("mindforge/") and " " not in line.strip()) or \
           (line.strip().endswith("/") and line.strip().count("/") == 1 and ("‚îú" not in line and "‚îî" not in line)):
            stack = [line.strip().rstrip("/")]
            continue

        if _is_tree_line(line):
            depth = _calc_depth(line)
            name = _extract_name(line).strip()
            while len(stack) > depth:
                stack.pop()

            is_dir = name.endswith("/")
            seg = name.rstrip("/")

            if is_dir:
                stack.append(seg)
                dirs.append(stack.copy())
            else:
                # —Ñ–∞–π–ª ‚Äî –∑–∞–ø–æ–º–∏–Ω–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –µ—â—ë –Ω–µ –ø–æ–ø–∞–¥–∞–ª—Å—è
                parent = stack.copy()
                if parent:
                    dirs.append(parent.copy())

    # –£–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏—è
    uniq: List[List[str]] = []
    seen: Set[tuple[str, ...]] = set()
    for p in dirs:
        t = tuple(p)
        if t not in seen and p:
            seen.add(t)
            uniq.append(p)
    return uniq

def to_relative_dirs(paths: List[List[str]]) -> Set[Path]:
    """–û—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ—Ä–µ–Ω—å (–ø–µ—Ä–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç) ‚Üí –ø–æ–ª—É—á–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏."""
    rel: Set[Path] = set()
    for segs in paths:
        if len(segs) <= 1:
            continue
        rel.add(Path(*segs[1:]))
    return rel

def main():
    parser = argparse.ArgumentParser(description="Create MindForge folder structure from Markdown scaffold.")
    parser.add_argument("markdown", help="Path to Markdown file with tree scaffold.")
    parser.add_argument("--target", default=r"H:\MindForge", help="Target root directory (default: H:\\MindForge).")
    parser.add_argument("--dry-run", action="store_true", help="Only show what would be created.")
    args = parser.parse_args()

    md_path = Path(args.markdown)
    if not md_path.is_file():
        raise SystemExit(f"Markdown file not found: {md_path}")

    markdown = md_path.read_text(encoding="utf-8")
    all_paths = parse_tree_dirs(markdown)
    rel_dirs = to_relative_dirs(all_paths)

    target = Path(args.target)
    # –ê–ª—Ñ–∞–≤–∏—Ç–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞, –∫–∞–∫ –≤ Windows Explorer
    missing = sorted([p for p in rel_dirs if not (target / p).is_dir()], key=lambda p: str(p).lower())
    existing = sorted([p for p in rel_dirs if (target / p).is_dir()], key=lambda p: str(p).lower())

    print(f"Target: {target}")
    print(f"Total dirs in scaffold: {len(rel_dirs)}")
    print(f"Existing: {len(existing)}")
    print(f"Missing:  {len(missing)}\n")

    if existing:
        print("‚úî Existing:")
        for p in existing:
            print(f"  - {p}")
        print()

    if missing:
        print("‚úö To create (alphabetical):")
        for p in missing:
            print(f"  + {p}")
    else:
        print("Nothing to create. All good!")

    if args.dry_run or not missing:
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–∞–ø–æ–∫
    for p in missing:
        (target / p).mkdir(parents=True, exist_ok=True)
        print(f"üìÇ Created: {target / p}")

    print("\n‚úÖ Done.")

if __name__ == "__main__":
    main()
