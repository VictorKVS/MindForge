# mindforge_gui_installer.py
# üìù MindForge GUI Installer
# –ß–∏—Ç–∞–µ—Ç Markdown —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π (tree-–≥—Ä–∞—Ñ–∏–∫–∞ ‚îú‚îÄ‚îÄ, ‚îî‚îÄ‚îÄ, ‚îÇ   ) –∏:
# 1) –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π,
# 2) —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å —Ü–µ–ª–µ–≤–æ–π –ø–∞–ø–∫–æ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é H:\MindForge),
# 3) –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç—á—ë—Ç –∏ —Å–æ–∑–¥–∞—ë—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.

import os
import re
import tkinter as tk
from tkinter import filedialog, messagebox, scrolledtext
from pathlib import Path
from typing import List, Set

DEFAULT_TARGET = Path(r"H:\MindForge")  # ‚Üê —Ç–≤–æ—è —Ü–µ–ª–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è

# -------- –ü–∞—Ä—Å–µ—Ä –¥–µ—Ä–µ–≤–∞ --------

CONNECTORS = ("‚îú‚îÄ‚îÄ", "‚îî‚îÄ‚îÄ")

def _calc_depth(line: str) -> int:
    """
    –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ —Å—á–∏—Ç–∞–µ—Ç –≥–ª—É–±–∏–Ω—É –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å–Ω—ã–º –≥—Ä—É–ø–ø–∞–º '‚îÇ   ' –∏–ª–∏ '    ' –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–∏—Ç–µ–ª—è.
    """
    depth = 0
    i = 0
    while i < len(line):
        if line.startswith("‚îÇ   ", i) or line.startswith("|   ", i) or line.startswith("    ", i):
            depth += 1
            i += 4
        elif line[i] in ("‚îú", "‚îî"):
            break
        else:
            i += 1
    return depth

def _is_tree_line(line: str) -> bool:
    return any(c in line for c in CONNECTORS)

def _extract_name(line: str) -> str:
    # –±–µ—Ä—ë–º –≤—Å—ë –ø–æ—Å–ª–µ '‚îú‚îÄ‚îÄ ' –∏–ª–∏ '‚îî‚îÄ‚îÄ '
    for c in CONNECTORS:
        idx = line.find(c)
        if idx != -1:
            return line[idx + len(c):].strip().split("#")[0].strip()  # —É–±–µ—Ä—ë–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ—Å–ª–µ '#'
    return line.strip()

def parse_tree_dirs(markdown: str) -> List[List[str]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π (–∫–∞–∂–¥—ã–π –ø—É—Ç—å ‚Äî —Å–ø–∏—Å–æ–∫ —Å–µ–≥–º–µ–Ω—Ç–æ–≤) –¢–û–õ–¨–ö–û –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π.
    –ö–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é (mindforge/ –∏–ª–∏ MindForge/) –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ —Å–µ–≥–º–µ–Ω—Ç 0,
    –Ω–æ –ø–æ–∑–∂–µ –æ—Ç–±—Ä–æ—Å–∏–º –ø—Ä–∏ —Å–±–æ—Ä–∫–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π.
    """
    dirs: List[List[str]] = []
    stack: List[str] = []

    lines = markdown.splitlines()

    # –ò–Ω–æ–≥–¥–∞ –≤ –±–ª–æ–∫–µ –º–æ–≥—É—Ç –±—ã—Ç—å plain-—Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "mindforge/" –±–µ–∑ –≤–µ—Ç–æ–∫ ‚Äî –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –∏—Ö
    for raw in lines:
        line = raw.rstrip()
        if not line.strip():
            continue

        # –û—Ç–¥–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ "–≥–æ–ª—ã—Ö" –∫–æ—Ä–Ω–µ–≤—ã—Ö: "mindforge/" –∏–ª–∏ "MindForge/"
        if (line.strip().lower().endswith("mindforge/") and " " not in line.strip()) or \
           (line.strip().endswith("/") and line.strip().count("/") == 1 and ("‚îú" not in line and "‚îî" not in line)):
            # –°–±—Ä–æ—Å–∏–º —Å—Ç–µ–∫ –∏ –Ω–∞—á–Ω—ë–º –æ—Ç –∫–æ—Ä–Ω—è
            stack = [line.strip().rstrip("/")]
            continue

        if _is_tree_line(line):
            depth = _calc_depth(line)
            name = _extract_name(line)

            # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º—è (–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ –∫–æ–Ω—Ü–µ –∏ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤)
            name = name.strip()

            # –û–±—Ä–µ–∂–µ–º —Å—Ç–µ–∫ –¥–æ —Ç–µ–∫—É—â–µ–π –≥–ª—É–±–∏–Ω—ã
            # (–¥–ª—è –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏ —Å—Ç–µ–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º ‚Äî —Ç–æ–≥–¥–∞ –∫–æ—Ä–µ–Ω—å –æ–ø—Ä–µ–¥–µ–ª–∏–º –∫–∞–∫ –ø–µ—Ä–≤—ã–π –∫–∞—Ç–∞–ª–æ–≥ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è)
            while len(stack) > depth:
                stack.pop()

            is_dir = name.endswith("/")
            seg = name.rstrip("/")

            if is_dir:
                # –∫–∞—Ç–∞–ª–æ–≥ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ç–µ–∫ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø—É—Ç—å
                stack.append(seg)
                dirs.append(stack.copy())
            else:
                # —Ñ–∞–π–ª ‚Äî –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º, –Ω–æ –ø—É—Ç—å-—Ä–æ–¥–∏—Ç–µ–ª—å –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
                parent = stack.copy()
                if parent:
                    dirs.append(parent.copy())

    # –£–Ω–∏–∫–∞–ª–∏–∑–∏—Ä—É–µ–º (–∫–∞–∫ –∫–æ—Ä—Ç–µ–∂–∏) –∏ –≤–µ—Ä–Ω—ë–º —Å–ø–∏—Å–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
    uniq = []
    seen = set()
    for p in dirs:
        t = tuple(p)
        if t not in seen and len(p) > 0:
            seen.add(t)
            uniq.append(p)
    return uniq

def to_relative_dirs(paths: List[List[str]]) -> Set[Path]:
    """
    –û—Ç–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç (–∫–æ—Ä–µ–Ω—å mindforge/MindForge), —Å–æ–±–∏—Ä–∞–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏.
    """
    rel: Set[Path] = set()
    for segs in paths:
        if len(segs) <= 1:
            continue
        rel.add(Path(*segs[1:]))
    return rel

# -------- GUI --------

class MindForgeGUI(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("MindForge GUI Installer")
        self.geometry("900x620")

        # –í–≤–æ–¥ —Ü–µ–ª–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self.target_var = tk.StringVar(value=str(DEFAULT_TARGET))
        tk.Label(self, text="Target directory:").grid(row=0, column=0, sticky="w", padx=8, pady=8)
        tk.Entry(self, textvariable=self.target_var, width=70).grid(row=0, column=1, sticky="we", padx=4, pady=8)
        tk.Button(self, text="Browse‚Ä¶", command=self.browse_target).grid(row=0, column=2, padx=8, pady=8)

        # –ö–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ Markdown
        tk.Button(self, text="Open Markdown‚Ä¶", command=self.open_md).grid(row=1, column=0, padx=8, pady=4, sticky="w")
        tk.Button(self, text="Paste from Clipboard", command=self.paste_clipboard).grid(row=1, column=1, padx=4, pady=4, sticky="w")

        # –¢–µ–∫—Å—Ç–æ–≤–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è Markdown
        tk.Label(self, text="Scaffold Markdown:").grid(row=2, column=0, sticky="w", padx=8)
        self.md_text = scrolledtext.ScrolledText(self, wrap="word", height=18)
        self.md_text.grid(row=3, column=0, columnspan=3, sticky="nsew", padx=8, pady=4)

        # –ö–Ω–æ–ø–∫–∏ –∞–Ω–∞–ª–∏–∑–∞/—Å–æ–∑–¥–∞–Ω–∏—è
        self.btn_analyze = tk.Button(self, text="Analyze scaffold", command=self.analyze)
        self.btn_analyze.grid(row=4, column=0, padx=8, pady=8, sticky="w")

        self.btn_create = tk.Button(self, text="Create missing folders", command=self.create_missing, state="disabled")
        self.btn_create.grid(row=4, column=1, padx=4, pady=8, sticky="w")

        # –û—Ç—á—ë—Ç
        tk.Label(self, text="Report:").grid(row=5, column=0, sticky="w", padx=8)
        self.report = scrolledtext.ScrolledText(self, wrap="word", height=12, state="disabled")
        self.report.grid(row=6, column=0, columnspan=3, sticky="nsew", padx=8, pady=4)

        # Grid weights
        self.grid_rowconfigure(3, weight=1)
        self.grid_rowconfigure(6, weight=1)
        self.grid_columnconfigure(1, weight=1)

        # –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞
        self.rel_dirs: Set[Path] = set()
        self.missing: Set[Path] = set()
        self.existing: Set[Path] = set()

    def browse_target(self):
        d = filedialog.askdirectory(title="Select target directory")
        if d:
            self.target_var.set(d)

    def open_md(self):
        path = filedialog.askopenfilename(
            title="Open Scaffold Markdown",
            filetypes=[("Markdown", "*.md;*.markdown;*.txt"), ("All files", "*.*")]
        )
        if not path:
            return
        with open(path, "r", encoding="utf-8") as f:
            self.md_text.delete("1.0", "end")
            self.md_text.insert("1.0", f.read())

    def paste_clipboard(self):
        try:
            text = self.clipboard_get()
        except tk.TclError:
            text = ""
        if text:
            self.md_text.delete("1.0", "end")
            self.md_text.insert("1.0", text)

    def analyze(self):
        md = self.md_text.get("1.0", "end")
        if not md.strip():
            messagebox.showwarning("No data", "Paste or open the scaffold Markdown first.")
            return

        try:
            tree_paths = parse_tree_dirs(md)
            self.rel_dirs = to_relative_dirs(tree_paths)
        except Exception as e:
            messagebox.showerror("Parse error", f"Failed to parse scaffold:\n{e}")
            return

        target = Path(self.target_var.get()).expanduser()
        if not target.exists():
            # –∞–Ω–∞–ª–∏–∑ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ü–µ–ª–∏: –≤—Å–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å—á–∏—Ç–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏
            self.missing = set(self.rel_dirs)
            self.existing = set()
        else:
            self.missing = set()
            self.existing = set()
            for rel in sorted(self.rel_dirs):
                if (target / rel).is_dir():
                    self.existing.add(rel)
                else:
                    self.missing.add(rel)

        self.btn_create.config(state="normal" if self.missing else "disabled")
        self._write_report(target)

    def _write_report(self, target: Path):
        self.report.config(state="normal")
        self.report.delete("1.0", "end")
        total = len(self.rel_dirs)
        self.report.insert("end", f"Target: {target}\n")
        self.report.insert("end", f"Total directories in scaffold: {total}\n")
        self.report.insert("end", f"Existing: {len(self.existing)}\n")
        self.report.insert("end", f"Missing:  {len(self.missing)}\n\n")

        if self.existing:
            self.report.insert("end", "‚úî Existing:\n")
            for p in sorted(self.existing):
                self.report.insert("end", f"  - {p}\n")
            self.report.insert("end", "\n")

        if self.missing:
            self.report.insert("end", "‚úö To create:\n")
            for p in sorted(self.missing):
                self.report.insert("end", f"  + {p}\n")
        else:
            self.report.insert("end", "Nothing to create. All good!\n")

        self.report.config(state="disabled")

    def create_missing(self):
        target = Path(self.target_var.get()).expanduser()
        try:
            for rel in sorted(self.missing):
                (target / rel).mkdir(parents=True, exist_ok=True)
            messagebox.showinfo("Done", f"Created {len(self.missing)} folders in:\n{target}")
        except Exception as e:
            messagebox.showerror("Error", f"Failed to create folders:\n{e}")
            return

        # –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∏–º –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
        self.analyze()


if __name__ == "__main__":
    app = MindForgeGUI()
    app.mainloop()
